#!/usr/bin/env python3
"""
Test City Name and Coordinate Compatibility
Ensures perfect matching between manual city entries and GPS coordinates
"""

import sys
sys.path.append('.')
from main import normalize_city, get_city_coordinates, calculate_distance_km

def test_city_coordinate_compatibility():
    """Test comprehensive city coordinate compatibility for CIS countries"""
    
    print("üåç Testing City-Coordinate Compatibility for CIS Countries")
    print("="*60)
    
    # Test cases with manual input and expected coordinates
    test_cases = [
        # Russian cities - different input variations
        ("–ú–æ—Å–∫–≤–∞", "Moscow coordinates"),
        ("–º–æ—Å–∫–≤–∞", "Moscow coordinates"),  
        ("–ú–û–°–ö–í–ê", "Moscow coordinates"),
        ("–º—Å–∫", "Moscow coordinates"),
        ("moscow", "Moscow coordinates"),
        
        ("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "St. Petersburg coordinates"),
        ("—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "St. Petersburg coordinates"),
        ("—Å–ø–±", "St. Petersburg coordinates"),
        ("–ø–∏—Ç–µ—Ä", "St. Petersburg coordinates"),
        ("–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "St. Petersburg coordinates"),
        
        ("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "Nizhny Novgorod coordinates"),
        ("–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥", "Nizhny Novgorod coordinates"),
        ("–Ω–Ω–æ–≤", "Nizhny Novgorod coordinates"),
        ("–Ω–Ω", "Nizhny Novgorod coordinates"),
        
        ("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "Ekaterinburg coordinates"),
        ("–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "Ekaterinburg coordinates"),
        ("–µ–∫–±", "Ekaterinburg coordinates"),
        
        # CIS Countries
        ("–ö–∏–µ–≤", "Kiev coordinates"),
        ("–∫–∏–µ–≤", "Kiev coordinates"),
        ("Kiev", "Kiev coordinates"),
        ("kyiv", "Kiev coordinates"),
        
        ("–ú–∏–Ω—Å–∫", "Minsk coordinates"),
        ("–º–∏–Ω—Å–∫", "Minsk coordinates"),
        ("Minsk", "Minsk coordinates"),
        
        ("–ê–ª–º–∞—Ç—ã", "Almaty coordinates"),
        ("–∞–ª–º–∞—Ç—ã", "Almaty coordinates"),
        ("Almaty", "Almaty coordinates"),
        ("–∞–ª–º–∞-–∞—Ç–∞", "Almaty coordinates"),
        
        ("–¢–∞—à–∫–µ–Ω—Ç", "Tashkent coordinates"),
        ("—Ç–∞—à–∫–µ–Ω—Ç", "Tashkent coordinates"),
        ("Tashkent", "Tashkent coordinates"),
        
        ("–ë–∏—à–∫–µ–∫", "Bishkek coordinates"),
        ("–±–∏—à–∫–µ–∫", "Bishkek coordinates"),
        ("Bishkek", "Bishkek coordinates"),
        
        ("–î—É—à–∞–Ω–±–µ", "Dushanbe coordinates"),
        ("–¥—É—à–∞–Ω–±–µ", "Dushanbe coordinates"),
        ("Dushanbe", "Dushanbe coordinates"),
        
        ("–ê—à–≥–∞–±–∞—Ç", "Ashgabat coordinates"),
        ("–∞—à–≥–∞–±–∞—Ç", "Ashgabat coordinates"),
        ("Ashgabat", "Ashgabat coordinates"),
        
        ("–ë–∞–∫—É", "Baku coordinates"),
        ("–±–∞–∫—É", "Baku coordinates"),
        ("Baku", "Baku coordinates"),
        
        ("–ï—Ä–µ–≤–∞–Ω", "Yerevan coordinates"),
        ("–µ—Ä–µ–≤–∞–Ω", "Yerevan coordinates"),
        ("Yerevan", "Yerevan coordinates"),
        
        ("–¢–±–∏–ª–∏—Å–∏", "Tbilisi coordinates"),
        ("—Ç–±–∏–ª–∏—Å–∏", "Tbilisi coordinates"),
        ("Tbilisi", "Tbilisi coordinates"),
    ]
    
    success_count = 0
    total_tests = len(test_cases)
    
    print(f"Testing {total_tests} city variations...\n")
    
    for input_city, expected_description in test_cases:
        # Normalize the city name
        normalized = normalize_city(input_city)
        
        # Get coordinates
        coordinates = get_city_coordinates(input_city)
        
        if coordinates:
            lat, lon = coordinates
            success_count += 1
            print(f"‚úÖ '{input_city}' ‚Üí '{normalized}' ‚Üí ({lat:.4f}, {lon:.4f})")
        else:
            print(f"‚ùå '{input_city}' ‚Üí '{normalized}' ‚Üí No coordinates found")
    
    print(f"\nüìä Results: {success_count}/{total_tests} cities have coordinates")
    print(f"Success Rate: {(success_count/total_tests)*100:.1f}%")
    
    # Test distance calculations between major cities
    print("\nüìè Testing Distance Calculations")
    print("="*40)
    
    distance_tests = [
        ("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 635),  # ~635km actual distance
        ("–ú–æ—Å–∫–≤–∞", "–ö–∏–µ–≤", 755),              # ~755km actual distance  
        ("–ê–ª–º–∞—Ç—ã", "–ù—É—Ä-–°—É–ª—Ç–∞–Ω", 1028),      # ~1028km actual distance
        ("–ú–∏–Ω—Å–∫", "–ú–æ—Å–∫–≤–∞", 700),            # ~700km actual distance
        ("–¢–∞—à–∫–µ–Ω—Ç", "–ë–∏—à–∫–µ–∫", 367),          # ~367km actual distance
    ]
    
    for city1, city2, expected_distance in distance_tests:
        coords1 = get_city_coordinates(city1)
        coords2 = get_city_coordinates(city2)
        
        if coords1 and coords2:
            lat1, lon1 = coords1
            lat2, lon2 = coords2
            calculated_distance = calculate_distance_km(lat1, lon1, lat2, lon2)
            
            # Allow 10% tolerance for distance calculation
            tolerance = expected_distance * 0.1
            if abs(calculated_distance - expected_distance) <= tolerance:
                print(f"‚úÖ {city1} ‚Üî {city2}: {calculated_distance:.0f}km (expected ~{expected_distance}km)")
            else:
                print(f"‚ö†Ô∏è  {city1} ‚Üî {city2}: {calculated_distance:.0f}km (expected ~{expected_distance}km)")
        else:
            print(f"‚ùå {city1} ‚Üî {city2}: Missing coordinates")
    
    # Test edge cases and compatibility
    print("\nüîç Testing Edge Cases")
    print("="*30)
    
    edge_cases = [
        "–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",     # Should not match Moscow
        "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥ —Ñ–ª–æ—Ä–∏–¥–∞", # Should not match Russian SPB
        "–Ω–æ–≤—ã–π –æ—Ä–ª–µ–∞–Ω",           # Should not match Orel
        "",                       # Empty string
        "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥",   # Non-existent city
    ]
    
    for edge_case in edge_cases:
        if edge_case:  # Skip empty string
            normalized = normalize_city(edge_case)
            coordinates = get_city_coordinates(edge_case)
            
            if coordinates:
                print(f"‚ö†Ô∏è  '{edge_case}' ‚Üí found coordinates (might be unexpected)")
            else:
                print(f"‚úÖ '{edge_case}' ‚Üí no coordinates (expected)")
        else:
            print("‚úÖ Empty string handled correctly")
    
    print("\n" + "="*60)
    print("üéØ City-Coordinate Compatibility Test Complete")
    
    if success_count >= total_tests * 0.9:  # 90% success rate
        print("üéâ Excellent compatibility! Cities will match correctly.")
        return True
    elif success_count >= total_tests * 0.8:  # 80% success rate  
        print("‚úÖ Good compatibility! Most cities will match correctly.")
        return True
    else:
        print("‚ö†Ô∏è  Some compatibility issues found. Review coordinate mapping.")
        return False

if __name__ == "__main__":
    test_city_coordinate_compatibility()