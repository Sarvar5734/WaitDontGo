"""
Translation system for Alt3r Bot
Manages multilingual text content for the neurodivergent dating bot.

EASY TRANSLATION GUIDE:
1. Add new translations to the TEXTS dictionary below
2. Use format: "translation_key": "Your text here"
3. Always add to BOTH 'en' and 'ru' sections
4. Use the check_missing_translations() function to find gaps
5. Test with get_text_safe() which never breaks the bot
"""

from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)

# ===== TRANSLATION TEXTS =====
# Main dictionary containing all bot texts in multiple languages
TEXTS = {
    "en": {
        # === WELCOME & ONBOARDING ===
        "welcome": "üåü Welcome to Alt3r!\n\nA dating platform designed specifically for neurodivergent individuals. Let's create your profile!",
        "language_prompt": "üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        
        # === QUESTIONNAIRE ===
        "questionnaire_age": "üë∂ How old are you? (18-100)",
        "questionnaire_gender": "üöª What's your gender?",
        "questionnaire_interest": "üíñ Who are you interested in meeting?",
        "questionnaire_city": "üìç What city are you in? (or share your location)",
        "questionnaire_name": "üë§ What's your name?",
        "questionnaire_bio": "‚úçÔ∏è Tell us a bit about yourself! Share your interests, hobbies, or what makes you unique.",
        "questionnaire_photo": "üì∏ Upload a photo of yourself (optional - you can skip this step)",
        
        # === PROFILE ===
        "profile_preview": "üìã Here's your profile:",
        "profile_correct": "Is everything correct?",
        "profile_saved": "‚úÖ Profile saved! Welcome to Alt3r!",
        "ready_to_connect": "Ready to connect!",
        
        # === MAIN MENU ===
        "main_menu": "üè† Main Menu - What would you like to do?",
        "profile_menu_0": "üë§ My Profile",
        "profile_menu_1": "üîç Browse Profiles", 
        "profile_menu_2": "üß† NeuroSearch",
        "profile_menu_3": "üì∏ Change Photo",
        "profile_menu_4": "‚úçÔ∏è Change Bio",
        "profile_menu_5": "üíå My Likes",
        "profile_menu_6": "‚öôÔ∏è Settings",
        "profile_menu_7": "üìù Feedback",
        "profile_menu_8": "üíñ Support the Project",
        
        # === BUTTONS ===
        "btn_girl": "Girl",
        "btn_boy": "Boy", 
        "btn_girls": "Girls",
        "btn_boys": "Boys",
        "btn_all": "Everyone",
        "btn_yes": "‚úÖ Yes",
        "btn_change": "üîÑ Change",
        "btn_skip": "‚è≠Ô∏è Skip",
        "back_to_menu": "üè† Back to Menu",
        
        # === DATING ===
        "no_profiles": "üòï No profiles available right now. Try again later!",
        "like_sent": "‚ù§Ô∏è Like sent!",
        "skip_profile": "‚è≠Ô∏è Skipped",
        "its_match": "üéâ It's a match!\n\nYou can message each other!",
        "new_like": "‚ù§Ô∏è Someone liked you!",
        
        # === STATUS MESSAGES ===
        "photo_updated": "‚úÖ Photo updated!",
        "bio_updated": "‚úÖ Description updated!",
        "message_sent": "‚úÖ Message sent!",
        "invalid_age": "‚ùå Please enter a valid age (18-100)",
        
        # === PAYMENT & SUPPORT ===
        "support_title": "üíñ Support Alt3r Project",
        "support_description": "Help us improve Alt3r and create better connections for the neurodivergent community!\n\nüí´ We now accept Telegram Stars and TON payments!",
        "support_amounts": "Choose your support method:",
        "support_stars_title": "‚≠ê Telegram Stars",
        "support_ton_title": "üíé TON Cryptocurrency",
        "support_stars_50": "‚≠ê 50 Stars - Coffee support",
        "support_stars_100": "‚≠ê 100 Stars - Pizza fund", 
        "support_stars_250": "‚≠ê 250 Stars - Generous support",
        "support_stars_500": "‚≠ê 500 Stars - Super supporter",
        "support_ton_1": "üíé 1 TON - Basic support",
        "support_ton_5": "üíé 5 TON - Strong support",
        "support_ton_10": "üíé 10 TON - Major support",
        "support_custom_stars": "‚≠ê Custom Stars amount",
        "support_custom_ton": "üíé Custom TON amount",
        "payment_success": "üéâ Thank you for your support! Your contribution helps us build a better platform for neurodivergent connections.",
        "payment_cancelled": "‚ùå Payment was cancelled. No worries - you can support us anytime!",
        "payment_failed": "‚ùå Payment failed. Please try again or contact support.",
        "custom_stars_prompt": "‚≠ê Enter Stars amount (minimum 10 Stars):",
        "custom_ton_prompt": "üíé Enter TON amount (minimum 0.1 TON):",
        "invalid_stars_amount": "‚ùå Please enter a valid Stars amount (minimum 10)",
        "invalid_ton_amount": "‚ùå Please enter a valid TON amount (minimum 0.1)",
        "stars_payment_description": "Support Alt3r with Telegram Stars",
        "ton_payment_description": "Support Alt3r with TON cryptocurrency",
        "generate_ton_invoice": "üíé Generate TON Payment",
        "ton_payment_address": "Send TON to this address:",
        "ton_payment_comment": "Include this comment:",
        "ton_payment_wait": "‚è≥ Waiting for payment confirmation...",
        "ton_payment_verified": "‚úÖ TON payment verified!",
        
        # === DESCRIPTIVE TEXTS ===
        "years_old": "years old",
        "seeking": "seeking",
        "city": "City:",
        "about_me": "About me:",
        "send_message": "üíå Send Message",
        
        # === MISSING TRANSLATION FALLBACKS ===
        "missing_translation": "‚ùå Missing translation",
        "fallback_text": "Text not available",
    },
    
    "ru": {
        # === WELCOME & ONBOARDING ===
        "welcome": "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Alt3r!\n\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–ª—è –Ω–µ–π—Ä–æ–æ—Ç–ª–∏—á–Ω—ã—Ö –ª—é–¥–µ–π. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!",
        "language_prompt": "üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        
        # === QUESTIONNAIRE ===
        "questionnaire_age": "üë∂ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (18-100)",
        "questionnaire_gender": "üöª –í–∞—à –ø–æ–ª?",
        "questionnaire_interest": "üíñ –ö—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?",
        "questionnaire_city": "üìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? (–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π)",
        "questionnaire_name": "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        "questionnaire_bio": "‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏, —Ö–æ–±–±–∏ –∏–ª–∏ —Ç–µ–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.",
        "questionnaire_photo": "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        
        # === PROFILE ===
        "profile_preview": "üìã –í–æ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:",
        "profile_correct": "–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
        "profile_saved": "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Alt3r!",
        "ready_to_connect": "–ì–æ—Ç–æ–≤ –∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º!",
        
        # === MAIN MENU ===
        "main_menu": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å?",
        "profile_menu_0": "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        "profile_menu_1": "üîç –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏",
        "profile_menu_2": "üß† –ù–µ–π—Ä–æ–ü–æ–∏—Å–∫", 
        "profile_menu_3": "üì∏ –°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",
        "profile_menu_4": "‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
        "profile_menu_5": "üíå –ú–æ–∏ –ª–∞–π–∫–∏",
        "profile_menu_6": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
        "profile_menu_7": "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        "profile_menu_8": "üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
        
        # === BUTTONS ===
        "btn_girl": "–î–µ–≤—É—à–∫–∞",
        "btn_boy": "–ü–∞—Ä–µ–Ω—å",
        "btn_girls": "–î–µ–≤—É—à–∫–∏", 
        "btn_boys": "–ü–∞—Ä–Ω–∏",
        "btn_all": "–í—Å–µ",
        "btn_yes": "‚úÖ –î–∞",
        "btn_change": "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å",
        "btn_skip": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "back_to_menu": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        
        # === DATING ===
        "no_profiles": "üòï –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
        "like_sent": "‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        "skip_profile": "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ",
        "its_match": "üéâ –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!",
        "new_like": "‚ù§Ô∏è –ö—Ç–æ-—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ª–∞–π–∫!",
        
        # === STATUS MESSAGES ===
        "photo_updated": "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        "bio_updated": "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        "message_sent": "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        "invalid_age": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100)",
        
        # === PAYMENT & SUPPORT ===
        "support_title": "üíñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Alt3r",
        "support_description": "–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —É–ª—É—á—à–∏—Ç—å Alt3r –∏ —Å–æ–∑–¥–∞—Ç—å –ª—É—á—à–∏–µ —Å–≤—è–∑–∏ –¥–ª—è –Ω–µ–π—Ä–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!\n\nüí´ –¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º Telegram Stars –∏ TON!",
        "support_amounts": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        "support_stars_title": "‚≠ê Telegram Stars",
        "support_ton_title": "üíé TON –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
        "support_stars_50": "‚≠ê 50 Stars - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ñ–µ",
        "support_stars_100": "‚≠ê 100 Stars - –§–æ–Ω–¥ –ø–∏—Ü—Ü—ã", 
        "support_stars_250": "‚≠ê 250 Stars - –©–µ–¥—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "support_stars_500": "‚≠ê 500 Stars - –°—É–ø–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "support_ton_1": "üíé 1 TON - –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "support_ton_5": "üíé 5 TON - –°–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "support_ton_10": "üíé 10 TON - –ö—Ä—É–ø–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "support_custom_stars": "‚≠ê –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ Stars",
        "support_custom_ton": "üíé –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ TON",
        "payment_success": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç—Ä–æ–∏—Ç—å –ª—É—á—à—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –Ω–µ–π—Ä–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–≤—è–∑–µ–π.",
        "payment_cancelled": "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å - –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
        "payment_failed": "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        "custom_stars_prompt": "‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars (–º–∏–Ω–∏–º—É–º 10 Stars):",
        "custom_ton_prompt": "üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É TON (–º–∏–Ω–∏–º—É–º 0.1 TON):",
        "invalid_stars_amount": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars (–º–∏–Ω–∏–º—É–º 10)",
        "invalid_ton_amount": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É TON (–º–∏–Ω–∏–º—É–º 0.1)",
        "stars_payment_description": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Alt3r —á–µ—Ä–µ–∑ Telegram Stars",
        "ton_payment_description": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Alt3r —á–µ—Ä–µ–∑ TON –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
        "generate_ton_invoice": "üíé –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TON –ø–ª–∞—Ç–µ–∂",
        "ton_payment_address": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TON –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å:",
        "ton_payment_comment": "–í–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
        "ton_payment_wait": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...",
        "ton_payment_verified": "‚úÖ TON –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
        
        # === DESCRIPTIVE TEXTS ===
        "years_old": "–ª–µ—Ç",
        "seeking": "–∏—â–µ—Ç",
        "city": "–ì–æ—Ä–æ–¥:",
        "about_me": "–û–±–æ –º–Ω–µ:",
        "send_message": "üíå –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
    }
}

# ===== NEURODIVERGENT TRAITS =====
# Comprehensive list of neurodivergent traits in multiple languages
ND_TRAITS = {
    "en": {
        "adhd": "ADHD",
        "autism": "Autism/Aspergers", 
        "anxiety": "Anxiety",
        "depression": "Depression",
        "bipolar": "Bipolar",
        "ocd": "OCD",
        "ptsd": "PTSD",
        "sensory": "Sensory Processing",
        "dyslexia": "Dyslexia/Learning Differences",
        "highly_sensitive": "Highly Sensitive Person (HSP)",
        "introvert": "Introvert",
        "empath": "Empath",
        "creative": "Creative/Artist",
        "none": "Prefer not to specify"
    },
    "ru": {
        "adhd": "–°–î–í–ì",
        "autism": "–ê—É—Ç–∏–∑–º/–ê—Å–ø–µ—Ä–≥–µ—Ä",
        "anxiety": "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", 
        "depression": "–î–µ–ø—Ä–µ—Å—Å–∏—è",
        "bipolar": "–ë–∏–ø–æ–ª—è—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
        "ocd": "–û–ö–†",
        "ptsd": "–ü–¢–°–†",
        "sensory": "–°–µ–Ω—Å–æ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
        "dyslexia": "–î–∏—Å–ª–µ–∫—Å–∏—è/–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è",
        "highly_sensitive": "–í—ã—Å–æ–∫–æ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ (–í–ß–õ)",
        "introvert": "–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç",
        "empath": "–≠–º–ø–∞—Ç",
        "creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫/–•—É–¥–æ–∂–Ω–∏–∫", 
        "none": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"
    }
}

# ===== TRANSLATION FUNCTIONS =====

def get_user_language(user_id: int, session) -> str:
    """
    Get user's language preference from database.
    
    Args:
        user_id: Telegram user ID
        session: Database session
        
    Returns:
        Language code ('en' or 'ru'), defaults to 'en'
    """
    from database import User  # Import here to avoid circular imports
    
    user = session.query(User).filter(User.user_id == user_id).first()
    if user and user.lang:
        return user.lang
    return 'en'

def get_text(user_id: int, key: str, session=None) -> str:
    """
    Get localized text for a user.
    
    Args:
        user_id: Telegram user ID
        key: Text key to look up
        session: Optional database session (will create new if not provided)
        
    Returns:
        Localized text string
    """
    if session:
        lang = get_user_language(user_id, session)
    else:
        from database import get_db_session  # Import here to avoid circular imports
        with get_db_session() as db_session:
            lang = get_user_language(user_id, db_session)
    
    return TEXTS[lang].get(key, TEXTS['en'].get(key, key))

def get_nd_trait(trait_key: str, language: str = 'en') -> str:
    """
    Get neurodivergent trait name in specified language.
    
    Args:
        trait_key: Trait identifier key
        language: Language code ('en' or 'ru')
        
    Returns:
        Localized trait name
    """
    return ND_TRAITS[language].get(trait_key, ND_TRAITS['en'].get(trait_key, trait_key))

def get_available_languages() -> List[Dict[str, str]]:
    """
    Get list of available languages with display names.
    
    Returns:
        List of dictionaries with 'code' and 'name' keys
    """
    return [
        {'code': 'en', 'name': 'üá¨üáß English'},
        {'code': 'ru', 'name': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'}
    ]

def add_translation(language: str, key: str, text: str) -> bool:
    """
    Add or update a translation entry.
    
    Args:
        language: Language code
        key: Text key
        text: Translated text
        
    Returns:
        True if successful, False otherwise
    """
    try:
        if language not in TEXTS:
            TEXTS[language] = {}
        
        TEXTS[language][key] = text
        return True
    except Exception:
        return False

def get_translation_coverage(language: str) -> dict:
    """
    Get translation coverage statistics for a language.
    
    Args:
        language: Language code to check
        
    Returns:
        Dictionary with coverage statistics
    """
    if language not in TEXTS:
        return {'total': 0, 'translated': 0, 'coverage': 0.0}
    
    en_keys = set(TEXTS['en'].keys())
    lang_keys = set(TEXTS[language].keys())
    
    total = len(en_keys)
    translated = len(lang_keys.intersection(en_keys))
    coverage = (translated / total * 100) if total > 0 else 0.0
    
    return {
        'total': total,
        'translated': translated,
        'coverage': coverage,
        'missing': list(en_keys - lang_keys)
    }